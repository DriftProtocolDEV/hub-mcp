- name: Checkout
    uses: actions/checkout@v4
    with:
      fetch-depth: 0 

  - name: Bump Version
    id: bump_version
    shell: bash
    run: |
      set -euo pipefail

      # If a version input was provided, use it directly
      if [[ "${{ inputs.version }}" != "" ]]; then
        echo "new_version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        # don't create a tag name in this quick fix path (leave empty or set to v<ver> if desired)
        echo "new_tag=" >> $GITHUB_OUTPUT
        exit 0
      fi

      # Find latest tag (fall back to 0.0.0)
      latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || true)
      if [[ -z "$latest_tag" ]]; then
        latest="0.0.0"
      else
        # strip leading 'v' if present
        latest="${latest_tag#v}"
      fi

      IFS='.' read -r major minor patch <<< "$latest"
      major=${major:-0}
      minor=${minor:-0}
      patch=${patch:-0}

      case "${{ env.VERSION_LEVEL }}" in
        major) major=$((major+1)); minor=0; patch=0;;
        minor) minor=$((minor+1)); patch=0;;
        patch) patch=$((patch+1));;
        *) minor=$((minor+1)); patch=0;;
      esac

      new_version="${major}.${minor}.${patch}"
      new_tag="v${new_version}"

      echo "new_version=${new_version}" >> $GITHUB_OUTPUT
      echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT

  - name: Get Release Version
    id: release_version
    shell: bash
    run: |
      if [[ '${{ steps.bump_version.outputs.new_version }}' != '' ]]; then
        echo "version=${{ steps.bump_version.outputs.new_version }}" >> $GITHUB_OUTPUT
        echo "tag=${{ steps.bump_version.outputs.new_tag }}" >> $GITHUB_OUTPUT
      elif [[ '${{ inputs.version }}' != '' ]]; then
        echo "Using already provided version: ${{ inputs.version }}."
        echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
      else
        echo "Unable to compute version for staging environment."
        exit 42
      fi

  - name: Hub Login
    uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc #v2
    with:
      username: dockerbuildbot
      password: ${{ secrets.DOCKERBUILDBOT_WRITE_PAT }}

  - name: Setup Hydrobuild
    uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 #v3
    if: ${{ ! inputs.build_local }}
    with:
      version: "lab:latest"
      driver: cloud
      endpoint: docker/platform-experience
      install: true

  - name: Check Docker image exists
    id: hub_image_exists
    shell: bash
    run: |
      if docker manifest inspect docker/${{ env.NAME }}:${{ steps.bump_version.outputs.new_version }}; then
        echo 'exists=true' >> $GITHUB_OUTPUT
      else
        echo 'exists=false' >> $GITHUB_OUTPUT
      fi

  - name: Ensure attestations are supported
    shell: bash
    run: |
      driver=$(docker buildx inspect | grep "Driver:")
      if [[ "$driver" == *"docker"* ]]; then
        echo "detected driver, needs containerd snapshotter enabled: $driver"
        sudo mkdir -p /etc/docker
        if [ -f /etc/docker/daemon.json ]; then
          cat /etc/docker/daemon.json | jq '. + {"features": {"containerd-snapshotter": true}}' | sudo tee /etc/docker/daemon.json
        else
          echo '{"features": {"containerd-snapshotter": true}}' | sudo tee /etc/docker/daemon.json
        fi
        sudo systemctl restart docker
      fi

  - name: Set up QEMU
    uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 #v3

  - name: Build and push service image
    id: build_and_push
    if: steps.hub_image_exists.outputs.exists == 'false'
    uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5
    with:
      context: .
      file: Dockerfile
      build-args: |
        SERVICE_NAME=${{ env.NAME }}
        SERVICE_VERSION=${{ steps.release_version.outputs.version }}
      push: ${{ inputs.dry_run != 'true' }}
      tags: |
        docker/${{ env.NAME }}:${{ steps.release_version.outputs.version }}
        docker/${{ env.NAME }}:latest
      labels: |
        org.opencontainers.image.revision=${{ github.event.pull_request.head.sha || github.event.after || github.event.release.tag_name }}
        org.opencontainers.image.source=https://github.com/${{ github.repository }}
        com.docker.image.source.entrypoint=Dockerfile
      provenance: mode=max
      sbom: true
      platforms: linux/amd64,linux/arm64

  - name: Delete git tag created by this workflow
    if: failure() && steps.bump_version.outputs.new_tag != ''
    shell: bash
    run: |
      git push --delete origin ${{ steps.bump_version.outputs.new_tag }}